---- 索引和散列 ----

--分类方式一：聚集索引和非聚集索引
聚集索引(主索引)：如果包含记录的文件按照某个搜索码指定的顺序排序，那么该搜索码对应的索引称为聚集索引，也称为主索引
非聚集索引(辅助索引)：搜索码指定的顺序与文件中记录的物理顺序不同的索引称为非聚集索引或辅助索引，辅助索引必须是稠密索引
--分类方式二：稠密索引和稀疏索引
稠密索引：在稠密索引中，文件中的每个搜索码值都有一个索引项
	在稠密聚集索引中：索引项包括搜索码值以及指向具有该搜索码值的第一条数据记录的指针，因为聚集索引是物理有序的，所以后面的记录页容易找到
	在稠密非聚集索引中：索引必须存储指向所有具有相同搜索码的记录的指针列表，因为和上面相反
稀疏索引：在稀疏索引中，只为搜索码的某些值建立索引项，且只有当关系按搜索码排序存储时(即聚集索引)才能用稀疏索引，原因和上面一行一样
	为每个块键一个索引项的稀疏索引是一个好的选择，因为处理数据库查询的开销主要由把块从磁盘读到主存中的时间决定，
	一旦将块放入主存，扫描整改块的时间就可以忽略，当然如果数据在溢出块或在多个块的情况就会耗费更多时间

--多级索引
由于索引本身也要占用空间，所以当索引数量很大时，会占用大量空间，因此不能将索引全部读入内存，这时只能把索引放到磁盘，也当数据来查询
	例子：假设有10000条记录，且每条记录对应一个索引，那么要在这10000个索引中查找一个指定索引需要查找log2 10000=log2 100 + log2 100≈7 + 7≈14次
	假设文件每个块可以存放100个索引，即一共100个块存放索引，那么可以为这100个块创建100个二级索引(稀疏索引)，这100个索引只需1个块来存放，所以可以全部读到内存，
	从内存中查找二级索引的时间可以忽略，只需关心从这个二级索引指向的100个索引的块中查找的时间，查找次数为log2 100≈7次，
	最后加入数据量更大的情况，可以建更多级索引
	
--索引的更新
索引的更新可以理解为插入和删除两个操作，而没有明确的更新操作
插入和更新操作对于稠密索引和稀疏索引有不同的步骤
多级索引的插入和删时，对于第二层索引而言，底层索引被看成包含记录的文件，同理对第三层索引，第二层索引被看成包含记录的文件，依次类推

--多码上的索引
即所以在多个属性上，这样的索引可以用来有效查找某些其他类型的查询

--顺序索引(通常指B+树索引)和散列索引
B+树索引：树结构可保持索引的顺序，另外B树索引有少量优点，但缺点更多，所以都使用B+树
B+树索引查找：通常B+树索引的每个节点保存1个文件块的索引，例如每个文件块4K，搜索码32字节，记录指针8字节，那么每个块可放100个索引，
	那么每个块中平均找50次，那在一个有500万数据的关系中需要访问的节点数=log50 5000000 ≈ 4，如果采用二叉树结构，则需要访问log2 5000000 ≈ 23 个节点
B+树更新
	插入：插入首先也要像查询一样找到插入位置，然后插入索引；插入可能还会引起节点的分裂甚至增加树的深度
	删除：删除首先也要像查询一样找到插入位置，然后删除索引；删除可能还会引起节点的合并，节点的重新分配以及增加树的深度
B+树不仅能用于索引，还能用于文件组织，即可以将记录放在B+树中	
多码索引：即建立在多个属性上的索引
	多码索引的好处：当查询语句有两个或多个条件时，例如两个的情况：如果单独满足条件1和条件2的记录都很多，但是满足同时满足条件1和条件2的记录很少，
	那么如果分别为两个属性建立单属性索引就会读取大量记录然后取交集得到少量记录，如果使用两个属性上的多码索引就能直接定位到少量记录，
	另外，多码索引在只有1个查询条件的情况下也能起作用
	
散列索引：对搜索码调用散列函数得到一个值，然后根据这个值将搜索码放到响应桶中
桶溢出处理：可以新建溢出桶，并将原桶和溢出桶串成一个链表结构
静态散列：桶的数目是固定的
动态散列：随着数据量变化，桶的数量会变化；桶的数量应该增加的时候一定会增加，但是可以减少的时候却不一定会减少，要索引数量减少了很多的情况下才会去减少桶，这样可以预防反弹
静态散列和动态散列比较：静态散列需要预估数据总量来确定桶的数目，且初期会浪费很多空间；而动态散列查找桶时需要先访问桶地址表，多了一层访问；总体来说，对于数据库，动态散列由于静态散列

--顺序索引和散列索引比较
假如查询条件都是(属性=值)这种等值比较，那么使用散列索引比较好
如果查询条件包括(属性>值)这种范围比较，那么使用B+树索引比较好
因为散列索引是随机分配的，所以不同的索引值可能在物理位置上相隔很远，涉及很多文件块
而B+树索引是有序的，范围检查只要按物理存储顺序检查就可以了，很方便

--位图索引，详细参考第298页
位图索引是在属性的取值上对关系中所有记录建立位图，因为位图是二进制串，所以多个做相交运算很容易，
所以如果在多个属性的取值上都建立位图，那么涉及这多个属性的查询条件比较就只需要将对应位图做交运算，
所以位图对多码查询很有用

位图适合建立在取值较少的属性上，因为如果属性取值太多，那需要建立很多个位图
位图适合建立在属性取值占所有记录比例较大的取值上，因为如果一个属性取值在关系中只占极少数，
	那么位图中将出现大量的0，而1极少，这样既没发挥位图的左右，也浪费了空间