// 二叉树的指针实现
digraph G {
    node [shape=Mrecord];//Mrecord为圆角
	graph [spline=line];
	/**
	|：横向分割
	{}：竖向分割
	*/
	nodeA [label="{<P>/|<D>A|{<L>|<R>}}"];//<>中为隐藏域
	nodeB [label="{<P>|<D>B|{<L>/|<R>}}"];
	nodeC [label="{<P>|<D>C|{<L>|<R>}}"];
	nodeD [label="{<P>|<D>D|{<L>|<R>}}"];
	nodeE [label="{<P>|<D>E|{<L>/|<R>/}}"];
	nodeF [label="{<P>|<D>F|{<L>/|<R>/}}"];
	nodeG [label="{<P>|<D>G|{<L>/|<R>}}"];
	nodeH [label="{<P>|<D>H|{<L>|<R>/}}"];
	nodeI [label="{<P>|<D>I|{<L>|<R>/}}"];
	nodeJ [label="{<P>|<D>J|{<L>/|<R>/}}"];
	nodeK [label="{<P>|<D>K|{<L>/|<R>/}}"];
	                   
	// : 后面跟一个结点的指定区域
	nodeA:L -> nodeB;
	nodeA -> e1 [weight=10 style="invis"];
	nodeA:R -> nodeC;
	nodeB:P:n -> nodeA:w;
	nodeC:P:n -> nodeA:e;
	
	nodeB -> e2 [weight=10 style="invis"];
	nodeB -> e3 [weight=10 style="invis"];
	nodeB:R -> nodeD;
	nodeD:P:n -> nodeB:e;
	
	nodeD:L -> nodeE;
	nodeD -> e4 [weight=10 style="invis"];
	nodeD:R -> nodeF;
	nodeE:P:n -> nodeD:w;
	nodeF:P:n -> nodeD:e;
	
	nodeC:L -> nodeG;
	nodeC -> e5 [weight=10 style="invis"];
	nodeC:R -> nodeH;
	nodeG:P:n -> nodeC:w;
	nodeH:P:n -> nodeC:e;
	
	nodeG -> e6 [weight=10 style="invis"];
	nodeG -> e7 [weight=10 style="invis"];
	nodeG:R -> nodeI;
	nodeI:P:n -> nodeG:e;
	
	nodeH:L -> nodeJ;
	nodeH -> e8 [weight=10 style="invis"];
	nodeH -> e9 [weight=10 style="invis"];
	nodeJ:P:n -> nodeH:w;
	
	nodeI:L -> nodeK;
	nodeI -> e10 [weight=10 style="invis"];
	nodeI -> e11 [weight=10 style="invis"];
	nodeK:P:n -> nodeI:w;
    // 隐藏中间节点的连线
    //5 -- m2 [weight=10 style="invis"];
	// 隐藏中间节点
    e1,e2,e3,e4,e5,e6,e7,e8,e9,e10,e11 [label="" style="invis"]
	// 
	//n5 [label="5"]
}
//dot pointTree.dot -T png -o pointTree.png